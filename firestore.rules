/**
 * @file Firestore Security Rules
 * @description This ruleset enforces a strict user-ownership model for private data,
 *              allows public read access to global data, and restricts administrative
 *              actions to authorized users.
 *
 * @dataStructure
 *  - /users/{userId}: Stores user profile data, accessible only to the user.
 *  - /wallets/{walletId}: Stores user wallet data, accessible only to the user. walletId must equal userId.
 *  - /competitions/{competitionId}: Stores competition data, publicly readable.
 *  - /teams/{teamId}: Stores team data, publicly readable.
 *  - /fixtures/{fixtureId}: Stores fixture data, publicly readable.
 *  - /markets/{marketId}: Stores market data, restricted writes (admin only).
 *  - /pools/{marketId}: Stores pool data, restricted writes (Cloud Functions only).
 *  - /users/{userId}/trades/{tradeId}: Stores trade data, accessible only to the user.
 *  - /users/{userId}/positions/{positionId}: Stores position data, accessible only to the user.
 *  - /settlements/{marketId}: Stores settlement data, restricted writes (admin only).
 *  - /audit/{logId}: Stores audit logs, highly restricted access.
 *  - /roles_admin/{userId}: Denotes admin users. Existence of a document grants admin privileges.
 *  - /telegramProfiles/{telegramId}: Stores Telegram profile mappings, restricted access.
 *  - /botSessions/{chatId}: Stores Telegram bot session data, restricted access.
 *
 * @keySecurityDecisions
 *  - User data is strictly owned and controlled by the user.
 *  - Public data (competitions, teams, fixtures) is readable by all.
 *  - Administrative privileges are granted based on the existence of a document in `/roles_admin/{userId}`.
 *  - List operations on user-owned data are allowed only for the owner.
 *  - Unauthenticated reads are blocked.
 *
 * @denormalizationForAuthorization
 *  - Ownership is enforced by requiring the `userId` in the path to match the `uid` field within the document.
 *  - Admin status is determined by the existence of a document in the `/roles_admin/{userId}` collection, avoiding the need to store roles within the user document itself.
 *
 * @structuralSegregation
 *  - Public data (competitions, teams, fixtures) is stored in top-level collections for easy public access.
 *  - Private user data (wallets, trades, positions) is stored under the `/users/{userId}` collection.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Checks if the user is signed in.
     * @principle Verified Identity
     */
    function isSignedIn() {
      return request.auth != null;
    }

    /**
     * @description Checks if the user is an admin.
     * @principle Roles
     */
    function isAdmin() {
        return exists(/databases/$(database)/documents/roles_admin/$(request.auth.uid));
    }

    /**
     * @description Checks if the user is the owner of the resource based on userId
     * @principle Ownership
     */
    function isOwner(userId) {
      return isSignedIn() && request.auth.uid == userId;
    }

    /**
     * @description Enforces that the incoming resource has the correct owner ID.
     * @principle Relational Integrity
     */
    function requestOwnsResource(resourceUid) {
      return request.resource.data.uid == resourceUid;
    }


    /**
     * @description
     * @path /users/{userId}
     * @allow (read,write) if isSignedIn() && request.auth.uid == userId
     * @deny (read,write) if !isSignedIn()
     * @principle Enforces document ownership for read/write.
     */
    match /users/{userId} {
      allow read, write: if isOwner(userId);
    }

    /**
     * @description
     * @path /wallets/{walletId}
     * @allow (read,write) if isSignedIn() && request.auth.uid == walletId
     * @deny (read,write) if !isSignedIn() || request.auth.uid != walletId
     * @principle Enforces document ownership for read/write and validates path consistency.
     */
    match /wallets/{walletId} {
      allow read, write: if isOwner(walletId);
    }

    /**
     * @description
     * @path /competitions/{competitionId}
     * @allow (get,list) if true
     * @deny (create,update,delete) if true
     * @principle Allows public read access.
     */
    match /competitions/{competitionId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }

    /**
     * @description
     * @path /teams/{teamId}
     * @allow (get,list) if true
     * @deny (create,update,delete) if true
     * @principle Allows public read access.
     */
    match /teams/{teamId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }

    /**
     * @description
     * @path /fixtures/{fixtureId}
     * @allow (get,list) if true
     * @deny (create,update,delete) if true
     * @principle Allows public read access.
     */
    match /fixtures/{fixtureId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }

    /**
     * @description
     * @path /markets/{marketId}
     * @allow read: if true;
     * @allow create: if isAdmin();
     * @allow update: if isAdmin() && resource != null;
     * @allow delete: if isAdmin() && resource != null;
     * @allow list: if true;
     * @principle Allows public read access and restricts writes to admins.
     */
    match /markets/{marketId} {
      allow get, list: if true;
      allow create: if isAdmin();
      allow update: if isAdmin();
      allow delete: if isAdmin();
    }

    /**
     * @description
     * @path /pools/{marketId}
     * @allow get: if true;
     * @allow list: if false;
     * @allow create: if false;
     * @allow update: if false;
     * @allow delete: if false;
     * @principle No client writes to Pools.
     */
    match /pools/{marketId} {
      allow get: if true;
      allow list: if false;
      allow create, update, delete: if false;
    }

    /**
     * @description
     * @path /users/{userId}/trades/{tradeId}
     * @allow list, get: if isSignedIn() && resource.data.uid == request.auth.uid;
     * @allow create: if isSignedIn() && requestOwnsResource(request.auth.uid);
     * @allow update, delete: if false;
     */
    match /users/{userId}/trades/{tradeId} {
      // Queries are "list" in rules; allow list if the result docs belong to the caller
      allow list, get: if isOwner(userId);
      // Creating a trade must attribute to caller
      allow create: if isOwner(userId) && requestOwnsResource(userId);
      allow update, delete: if false; // mutate via Functions if needed
    }

    /**
     * @description
     * @path /users/{userId}/positions/{positionId}
     * @allow read, list: if isSignedIn() && resource.data.uid == request.auth.uid;
     * @allow write: if false;
     */
    match /users/{userId}/positions/{positionId} {
      allow get, list: if isOwner(userId);
      allow create, update, delete: if false; // mutate via Functions if needed
    }

    /**
     * @description
     * @path /settlements/{marketId}
     * @allow read: if true;
     * @allow write: if isAdmin();
     * @principle Allows public read access and restricts writes to admins.
     */
    match /settlements/{marketId} {
      allow get, list: if true;
      allow create, update, delete: if isAdmin();
    }

    /**
     * @description
     * @path /audit/{logId}
     * @allow read, write: if false;
     * @principle Denies all client access to audit logs.
     */
    match /audit/{logId} {
      allow get, list, create, update, delete: if false;
    }

    /**
     * @description
     * @path /roles_admin/{userId}
     * @allow read, write: if false;
     * @principle No client read/write to roles
     */
    match /roles_admin/{userId} {
          allow read, write, create, update, delete: if false;
    }

    /**
     * @description
     * @path /telegramProfiles/{telegramId}
     */
    match /telegramProfiles/{telegramId} {
      allow get: if false;  // No public access to profiles
      allow list: if false; // No public access to profiles
      allow create: if false;  // Profiles are created via trusted server
      allow update: if false;  // Profiles are managed via trusted server
      allow delete: if false;  // Never allow client-side deletion
    }

    /**
     * @description
     * @path /botSessions/{chatId}
     */
    match /botSessions/{chatId} {
      allow get: if false;  // Must not be directly readable.
      allow list: if false; // No listing sessions.
      allow create: if false; // Only created by trusted bot.
      allow update: if false; // Only modified by trusted bot.
      allow delete: if false; // Never allow deletion via client.
    }
  }
}