/**
 * @file Firebase Security Rules for Cricket Prediction Market MVP
 *
 * @core_philosophy This ruleset enforces a strict user-ownership model for personal data,
 *                  public read access to global data, and admin-only access to sensitive
 *                  market and settlement data.
 *
 * @data_structure The data is organized into top-level collections for global entities
 *                 (competitions, teams, fixtures) and user-specific subcollections under
 *                 /users/{userId} for private data (wallets, trades, positions).
 *                 Admin status is stored in the /roles_admin/{userId} collection.
 *
 * @key_security_decisions - Public read access is granted for competitions, teams, and fixtures.
 *                         - User listing is disallowed for privacy.
 *                         - Market creation, modification, and settlement are restricted to admins.
 *                         - Audit logs have restricted access.
 *
 * @denormalization_for_authorization
 *   - Admin status is denormalized by checking for the existence of a document in the `/roles_admin/{userId}` collection.
 *   - Ownership for user-specific data is enforced by matching the `request.auth.uid` against the `userId` path parameter.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Checks if the request is authenticated.
     * @return True if the request is authenticated, false otherwise.
     */
    function isSignedIn() {
      return request.auth != null;
    }

    /**
     * @description Checks if the authenticated user is the owner of the resource.
     * @param {string} userId The user ID to compare against the authenticated user's ID.
     * @return True if the user is the owner, false otherwise.
     */
    function isOwner(userId) {
      return isSignedIn() && request.auth.uid == userId;
    }

    /**
     * @description Checks if the authenticated user is an existing owner of the resource (resource must exist).
     * @param {string} userId The user ID to compare against the authenticated user's ID.
     * @return True if the user is the owner and the resource exists, false otherwise.
     */
    function isExistingOwner(userId) {
      return isOwner(userId) && resource != null;
    }

    /**
     * @description Checks if the authenticated user has admin privileges.
     * @return True if the user is an admin, false otherwise.
     */
    function isAdmin() {
        return exists(/databases/$(database)/documents/roles_admin/$(request.auth.uid));
    }

    /**
     * @description Rules for user profiles.
     * @path /users/{userId}
     * @allow (create) - Authenticated user can create their own profile if the userId matches their auth.uid.
     * @allow (get, update, delete) - Authenticated user can get, update, and delete their own profile.
     * @deny (create) - Unauthenticated user cannot create a profile.
     * @deny (update, delete) - A different user cannot update or delete this profile.
     * @principle Enforces document ownership for writes; read access to owner only.
     */
    match /users/{userId} {
      allow get: if isOwner(userId);
      allow list: if false; // User listing is disallowed for privacy.
      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Rules for user wallets.
     * @path /wallets/{walletId}
     * @allow (create) - Authenticated user can create their own wallet if the walletId matches their auth.uid.
     * @allow (get, update, delete) - Authenticated user can get, update, and delete their own wallet.
     * @deny (create) - Unauthenticated user cannot create a wallet.
     * @deny (update, delete) - A different user cannot update or delete this wallet.
     * @principle Enforces document ownership for writes; read access to owner only.
     */
    match /wallets/{walletId} {
      allow get: if isOwner(walletId);
      allow list: if false; // Wallets are not listable.
      allow create: if isOwner(walletId);
      allow update: if isExistingOwner(walletId);
      allow delete: if isExistingOwner(walletId);
    }

    /**
     * @description Rules for cricket competitions.
     * @path /competitions/{competitionId}
     * @allow (get, list) - Anyone can read competition data.
     * @deny (create, update, delete) - Only admins can create, update, and delete competitions.
     * @principle Public read access with admin-only writes.
     */
    match /competitions/{competitionId} {
      allow get, list: if true;
      allow create: if isAdmin();
      allow update: if isAdmin() && resource != null;
      allow delete: if isAdmin() && resource != null;
    }

    /**
     * @description Rules for cricket teams.
     * @path /teams/{teamId}
     * @allow (get, list) - Anyone can read team data.
     * @deny (create, update, delete) - Only admins can create, update, and delete teams.
     * @principle Public read access with admin-only writes.
     */
    match /teams/{teamId} {
      allow get, list: if true;
      allow create: if isAdmin();
      allow update: if isAdmin() && resource != null;
      allow delete: if isAdmin() && resource != null;
    }

    /**
     * @description Rules for cricket match fixtures.
     * @path /fixtures/{fixtureId}
     * @allow (get, list) - Anyone can read fixture data.
     * @deny (create, update, delete) - Only admins can create, update, and delete fixtures.
     * @principle Public read access with admin-only writes.
     */
    match /fixtures/{fixtureId} {
      allow get, list: if true;
      allow create: if isAdmin();
      allow update: if isAdmin() && resource != null;
      allow delete: if isAdmin() && resource != null;
    }

    /**
     * @description Rules for prediction markets.
     * @path /markets/{marketId}
     * @allow (get, list) - Anyone can read market data.
     * @deny (create, update, delete) - Only admins can create, update, and delete markets.
     * @principle Admin-controlled access for creation/modification.
     */
    match /markets/{marketId} {
      allow get, list: if true;
      allow create: if isAdmin();
      allow update: if isAdmin() && resource != null;
      allow delete: if isAdmin() && resource != null;
    }

    /**
     * @description Rules for CPMM pools.
     * @path /pools/{marketId}
     * @deny get, list, create, update, delete - Writes should be restricted via Cloud Functions.
     * @principle Restricted writes via Cloud Functions.
     */
    match /pools/{marketId} {
        allow get: if false;
        allow list: if false;
        allow create: if false;
        allow update: if false;
        allow delete: if false;
    }

    /**
     * @description Rules for user trades.
     * @path /users/{userId}/trades/{tradeId}
     * @allow (create) - Authenticated user can create their own trade if the userId matches their auth.uid.
     * @allow (get, list, update, delete) - Authenticated user can get, list, update, and delete their own trades.
     * @deny (create) - Unauthenticated user cannot create a trade.
     * @deny (update, delete) - A different user cannot update or delete this trade.
     * @principle Enforces document ownership for writes; read access to owner only.
     */
    match /users/{userId}/trades/{tradeId} {
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Rules for user positions.
     * @path /users/{userId}/positions/{positionId}
     * @allow (create) - Authenticated user can create their own position if the userId matches their auth.uid.
     * @allow (get, list, update, delete) - Authenticated user can get, list, update, and delete their own positions.
     * @deny (create) - Unauthenticated user cannot create a position.
     * @deny (update, delete) - A different user cannot update or delete this position.
     * @principle Enforces document ownership for writes; read access to owner only.
     */
    match /users/{userId}/positions/{positionId} {
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Rules for market settlements.
     * @path /settlements/{marketId}
     * @deny (get, list) - Anyone can read settlement data.
     * @deny (create, update, delete) - Only admins can create, update, and delete settlements.
     * @principle Admin-controlled access for settlements.
     */
    match /settlements/{marketId} {
      allow get: if isAdmin();
      allow list: if false; //Settlements are not listable
      allow create: if isAdmin();
      allow update: if isAdmin() && resource != null;
      allow delete: if isAdmin() && resource != null;
    }

    /**
     * @description Rules for audit logs.
     * @path /audit/{logId}
     * @deny (get, list, create, update, delete) - Audit logs have restricted access.
     * @principle Restricted access for auditing purposes.
     */
    match /audit/{logId} {
        allow get: if false;
        allow list: if false;
        allow create: if false;
        allow update: if false;
        allow delete: if false;
    }
        /**
     * @description Rules for admin roles.
     * @path /roles_admin/{userId}
     */
    match /roles_admin/{userId} {
      allow get: if isAdmin();
      allow list: if false; // Admin roles are not listable.
      allow create: if isAdmin();
      allow update: if false; // Admins cannot update their own roles in this prototype.
      allow delete: if isAdmin();
    }
  }
}